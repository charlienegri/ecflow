## Copyright 2009-2020 ECMWF.
## This software is licensed under the terms of the Apache Licence version 2.0
## which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
## In applying this licence, ECMWF does not waive the privileges and immunities
## granted to it by virtue of its status as an intergovernmental organisation
## nor does it submit to any jurisdiction.

#
# site-config.jam for AIX v11.1 compiler
# This file should be place in $HOME or $BOOST_ROOT/tools/build/v2/
#-----------------------------------------------------------------

import os ;
local BOOST_ROOT = [ os.environ BOOST_ROOT ] ;

# ========================= referenced libs =========================================

# Boost libraries referenced in client/server programs.
# Assumes --layout=tagged
#
lib boost_serialization : :   <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_serialization-mt-d.a ;
lib boost_system : :          <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_system-mt-d.a ;
lib boost_thread : :          <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_thread-mt-d.a ;
lib boost_test   : :          <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_unit_test_framework-mt-d.a ;
lib boost_test_monitor : :    <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_test_exec_monitor-mt-d.a ;
lib boost_program_options : : <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_program_options-mt-d.a ;
lib boost_filesystem      : : <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_filesystem-mt-d.a ;
lib boost_datetime        : : <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_date_time-mt-d.a ;
lib boost_python          : : <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_python-mt-d.so ;
lib boost_python_static   : : <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_python-mt-d.a ;

# profile uses release libs
lib boost_serialization : :   <variant>profile <file>$(BOOST_ROOT)/stage/lib/libboost_serialization-mt.a ;
lib boost_system : :          <variant>profile <file>$(BOOST_ROOT)/stage/lib/libboost_system-mt.a ;
lib boost_thread : :          <variant>profile <file>$(BOOST_ROOT)/stage/lib/libboost_thread-mt.a ;
lib boost_test   : :          <variant>profile <file>$(BOOST_ROOT)/stage/lib/libboost_unit_test_framework-mt.a ;
lib boost_test_monitor : :    <variant>profile <file>$(BOOST_ROOT)/stage/lib/libboost_test_exec_monitor-mt.a ;
lib boost_program_options : : <variant>profile <file>$(BOOST_ROOT)/stage/lib/libboost_program_options-mt.a ;
lib boost_filesystem      : : <variant>profile <file>$(BOOST_ROOT)/stage/lib/libboost_filesystem-mt.a ;
lib boost_datetime        : : <variant>profile <file>$(BOOST_ROOT)/stage/lib/libboost_date_time-mt.a ;
lib boost_python          : : <variant>profile <file>$(BOOST_ROOT)/stage/lib/libboost_python-mt.so ;
lib boost_python_static   : : <variant>profile <file>$(BOOST_ROOT)/stage/lib/libboost_python-mt.a ;

lib boost_serialization : :   <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_serialization-mt.a ;
lib boost_system : :          <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_system-mt.a ;
lib boost_thread : :          <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_thread-mt.a ;
lib boost_test   : :          <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_unit_test_framework-mt.a ;
lib boost_test_monitor : :    <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_test_exec_monitor-mt.a ;
lib boost_program_options : : <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_program_options-mt.a ;
lib boost_filesystem      : : <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_filesystem-mt.a ;
lib boost_datetime        : : <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_date_time-mt.a ;
lib boost_python          : : <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_python-mt.so ;
lib boost_python_static   : : <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_python-mt.a ;


#======================= project site-config ================================

# -bbigtoc:
#  we get TOC overflow, because compiler/linker has 64k limit on
#  the number of global symbols. Options are use:
#       0/ Break up shared lib
#       1/ -bbigtoc to overcome at the cost of performance degradation
#       2/ --qipa=level=0 if this fails try
#       3/ --qipa=level=1 if this fails try
#       4/ --qipa=level=2 if this fails, revert to -bbigtoc
#       Currently option 2-4 didn't work!

# <threading>multi
#  Note: in order to use xlC_r compiler, you have to use either
#  "bjam threading=multi"  OR
#  add
#    requirements <threading>multi
#  as below.
#

# <cxxflags>-qsuppress=1500-029
# In release mode we get hundreds of 1500-029 warning message, ie failure to inline
# hence decided to supress this.
#
# Suppress 1540-2883 (W) Inline function "<funtion>" given attribute noinline.
# This was the fix for release mode of the compiler & fixed the serialisation crash
# Unfortunately it generates hundreds of warnings for each type seralized in each header file
#    "/s1a/emos_esuite/emos_data/sms/boost/boost_1_45_0/boost/serialization/singleton.hpp", line 126.17: 1540-2883 (W) Inline function "void use(const void_caster_primitive<Alias,Submittable> &)" given attribute noinline.
#    "/s1a/emos_esuite/emos_data/sms/boost/boost_1_45_0/boost/serialization/singleton.hpp", line 126.17: 1540-2883 (W) Inline function "void use(const iserializer<boost::archive::text_iarchive,PartExpression> &)" given attribute noinline.

project site-config
   : requirements <include>$(BOOST_ROOT)
   : requirements <threading>multi
   : requirements <cxxflags>-qsuppress=1540-0198                          # (W) The omitted keyword "private" is assumed for base class
   : requirements <cxxflags>-qsuppress=1540-2883                          # (W) Inline function "<function>" given attribute noinline.
   : requirements <variant>release:<cxxflags>-qsuppress=1500-029          # supress could not be inlined message
   : requirements <linkflags>-bbigtoc
   ;

# using syntax:
# using toolset-name : version :invocation-command : options ;
#   where options allows <cflags, cxxflags, compileflags and linkflags >
#
using vacpp ;
using testing ;
