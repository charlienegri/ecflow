## Copyright 2009-2020 ECMWF.
## This software is licensed under the terms of the Apache Licence version 2.0
## which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
## In applying this licence, ECMWF does not waive the privileges and immunities
## granted to it by virtue of its status as an intergovernmental organisation
## nor does it submit to any jurisdiction.

#
# This file should be changed depending on the new system
# no other files should need changing
# This file should be place in $HOME or $BOOST_ROOT/tools/build/v2/
#-----------------------------------------------------------------

import os ;
local BOOST_ROOT = [ os.environ BOOST_ROOT ] ;

#
# Boost libraries referenced in client/server programs
#
lib boost_serialization : :   <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_serialization-mt-d.a ;
lib boost_system : :          <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_system-mt-d.a ;
lib boost_thread : :          <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_thread-mt-d.a ;
lib boost_test   : :          <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_unit_test_framework-mt-d.a ;
lib boost_test_monitor : :    <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_test_exec_monitor-mt-d.a ;
lib boost_program_options : : <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_program_options-mt-d.a ;
lib boost_filesystem      : : <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_filesystem-mt-d.a ;
lib boost_datetime        : : <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_date_time-mt-d.a ;
lib boost_python          : : <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_python-mt-d.so ;
lib boost_python_static   : : <variant>debug <file>$(BOOST_ROOT)/stage/lib/libboost_python-mt-d.a ;

lib boost_serialization : :   <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_serialization-mt.a ;
lib boost_system : :          <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_system-mt.a ;
lib boost_thread : :          <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_thread-mt.a ;
lib boost_test   : :          <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_unit_test_framework-mt.a ;
lib boost_test_monitor : :    <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_test_exec_monitor-mt.a ;
lib boost_program_options : : <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_program_options-mt.a ;
lib boost_filesystem      : : <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_filesystem-mt.a ;
lib boost_datetime        : : <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_date_time-mt.a ;
lib boost_python          : : <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_python-mt.so ;
lib boost_python_static   : : <variant>release <file>$(BOOST_ROOT)/stage/lib/libboost_python-mt.a ;

# Lib for run time checks, use for debug builds only
lib rtc : :  <variant>debug <file>/opt/langtools/lib/hpux32/librtc.so ;


# project wide settings. Please disable requirements <variant>debug:<linkflags>+check=all
# for release build.
# Note: _XOPEN_SOURCE_EXTENDED is only needed for Client/Server categories
#       assuming its no harm to define everywhere
#
# Boost CHRONO does not work properly with HPUX compiler( boost version 1.51 )
# hence use of BOOST_THREAD_DONT_USE_CHRONO, See http://www.boost.org/doc/libs/1_51_0/doc/html/thread/build.html
# Even with this boost thread/chrono does not compile. Kept in case fixed in the future
#
project site-config
	: requirements <include>$(BOOST_ROOT)
	: requirements <threading>multi
	: requirements <define>HPUX
   : requirements <define>_XOPEN_SOURCE_EXTENDED
   : requirements <define>BOOST_THREAD_DONT_USE_CHRONO
#	: requirements <library>rtc
#	: requirements <variant>debug:<linkflags>+check=all
	;


# STATIC: Additional Lint type checks.Will drastically slow down compiles, hence optional
#
# use <compileflags>+w for additional lint style checking
# Suppress the most prevalent boost warnings, this allows us to see lint
# checks in our own code
#
# suppress - warning #2261-D: controlling expression is constant
#          - warning #2236-D: controlling expression is constant
#          - remark #4296-D: arithmetic operation on boolean type
#          - remark #2401-D: destructor for base class is not virtual
#          - remark #2340-D: value copied to temporary, reference to temporary use
#          - remark #4255-D: padding size of struct "d1" with 3 bytes to alignment boundary>]" at line 62
#          - remark #4227-D: padding struct with 3 bytes to align member "old_mask_"
#          - remark #2193-D: zero used for undefined preprocessing identifier "__GNUC__"
#          - remark #2324-D: duplicate friend declaration
#          - remark #4285-D: operator= does not have a check for the source and destination addresses being non-identical
#
# RUNTIME: Will drastically slow run runs, but will give very useful information, hence optional
#
# enable +check=all, to enable all runtime checks:
#     +check=bounds
#     +check=malloc
#     +check=stack:variables
#     +check=uninit -z
#using acc :  : : <compileflags>+w
#                 <compileflags>+W2236,2461,2261,2236,4296,2401,2340,4255,4227,2193,2324,4285
#		          <compileflags>+check=all
#                 ;


#
# suppress - warning #2236-D: controlling expression is constant
#            warning #2461-D: initial value of reference to non-const must be an lvalue
#            warning #2191-D: type qualifier is meaningless on cast type
#            warning #2815-D: type qualifier on return type is meaningless
#            warning #4232-D: conversion from "boost::python::converter::rvalue_from_python_stage1_data *" to a more strictly aligned type "boost::python::converter::rvalue_from_python_storage<boost::shared_ptr<CtsApi>> *" may cause misaligned access
#            warning #4189-D: warning #4189-D: a non-POD class type used in offsetof macro BOOST_STATIC_ASSERT(BOOST_PYTHON_OFFSETOF(rvalue_from_python_storage<T>,stage1) == 0);
#
# using syntax:
# using toolset-name : version : invocation-command : options ;
#   where options allows <cflags, cxxflags, compileflags and linkflags >
#
using acc : : : <compileflags>+W2236,2461,2191,2815,4232,4189
          ;

using testing ;
