## Copyright 2009-2020 ECMWF.
## This software is licensed under the terms of the Apache Licence version 2.0 
## which can be obtained at http://www.apache.org/licenses/LICENSE-2.0. 
## In applying this licence, ECMWF does not waive the privileges and immunities 
## granted to it by virtue of its status as an intergovernmental organisation 
## nor does it submit to any jurisdiction. 

# =============================================================================
# This jam file, allows for creation of ecflow python extension module, where
# we have a STATIC link to boost python 
# ===============================================================================

# ===============================================================================
# Error to watch out for:
# error: No best alternative for /python_for_extensions
#    next alternative: required properties: <python>2.7 <target-os>linux
#        matched
#    next alternative: required properties: <python>2.7 <target-os>linux
#        matched
# 
# Note: ./bootstrap.sh will create a project-config.jam
#
# Please check if you have more than one 'using python' in configuration files.
# Please check site-config.jam, user-config.jam and project-config.jam and 
# remove duplicated 'using python'.  
#
# When installing BOOST-python libs, make sure to call module load python *FIRST*
# Otherwise it will pick the python specified in project-config.jam, which make not be correct
#
# ==========================================================================================
# PYTHON3:
# Build:
#   1/ module load python3, this update the $PATH
#   2/ ./bootstrap.sh --with-python=/usr/local/apps/python3/3.5.1-01/bin/python3
#   3/ Need to manually edit $BOOST_ROOT/project-config.jam,  make sure file '$BOOST_ROOT/project-config.jam' has:
#
#      using python 
#       : 3.6 
#       : /usr/local/apps/python3/3.6.1-01/bin/python3  # ***** If this is left as python3, includes get messed up, have mix of python2 & 3
#       : /usr/local/apps/python3/3.6.1-01/include/python3.6m # include directory
#       ; 
#       ...
#      option.set includedir : /usr/local/apps/python3/3.6.1-01/include/python3.6m ;  # ***MAKE*** sure this is set
#
#     ***** cmd/prefix must be path to python3, otherwise compilation include files has a mixture of
#     python 2.7 and 3.5, YUK, took ages to debug
#
# Check:
#   To check the build make sure we don't have symbol pulled in from python2 libs
#   cd $BOOST_ROOT/stage/lib
#   nm -D *python* | grep PyClass_Type                                                # PyClass_Type is a symbol *ONLY* used in python2.x
#   nm -D /tmp/ma0/workspace/bdir/release/ecflow/Pyext/ecflow.so | grep PyClass_Type  # check ecflow.so
# ===============================================================================
        
#
# jamfile for installing, building exposing c++ library to python.
# and for testing embedded python
#
# Use of <dll-path> should force a relink. But this *ONLY* works for executables
# and *NOT* shared libraries. The HACKY work around is use <dll-path> when 
# building the extension. Hence this requires that ECFLOW_INSTALL_DIR 
# is correctly set during build time. Yuk. 
#
# python3 add test and migrate directories to PYTHONPATH for testing
#  - some tests require:
#    test/ecflow_test_util.py
#    migrate/ecflow_migrate.py
project : requirements <pythonpath>./test:./migrate  ;

project thePyext ;

use-project theCore      : ../ACore ;
use-project theNodeAttr  : ../ANattr ;
use-project theNode      : ../ANode ;   
use-project theBase      : ../Base ;
use-project theClient    : ../Client ;
use-project theSimulator : ../CSim ;

# Make the definition of the python-extension rule available
import python ;

if ! [ python.configured ]
{
    ECHO "notice: no Python configured in *user-config.jam*" ;
    ECHO "notice: will use default configuration" ;
    # We will typically place this in user-config || site-config.jam || $BOOST_ROOT/project-config.jam
    #using python
    #     :  # version
    #     :  # cmd-or-prefix
    #     :  # includes
    #     :  # libraries
    #     :  # condition
    #     ;
    #using python ;
    #using python : 3.5 : /usr/local/apps/python3/3.5.1-01/bin/python3 : /usr/local/apps/python3/3.5.1-01/include/python3.5m ;
}

# Specify the path to the Boost project.  If you move this project,
# adjust this path to refer to the Boost root directory.
import os ;
local BOOST_ROOT = [ os.environ BOOST_ROOT ] ;
use-project boost
  : $(BOOST_ROOT) ;

# ======================== libs ============================================
# HPUX:  ADD standard libs. They don't get added by default ?
#        Also on HPUX the shared libs appears reversed, and don't appear
#        in the order specified weird ?
#        Notice the use of <library> to add additional library on the link line
#        but only for HPUX/acc toolset
# <ALL>: It appears the pthread lib is automatically added. i.e >lib pthread ;
#
lib std_v2 ;
lib stream ;
lib Csup ;
lib unwind ;
lib m ;
alias hpux_std_libs : std_v2 stream Csup unwind m ;

# ========================================================================
# Extension:  Declare a Python extension called ecflow.  
# ========================================================================
python-extension ecflow : [ glob src/*.cpp ]
    /theCore//core
    /theNodeAttr//nodeattr
    /theNode//node
    /theBase//base
    /theClient//libclient
    /theSimulator//libsimu
    /site-config//boost_system
    /site-config//boost_serialization
    /site-config//boost_filesystem
    /site-config//boost_program_options
    /site-config//boost_datetime
    /site-config//boost_python_static
    : <variant>debug:<define>DEBUG
      <toolset>acc:<library>hpux_std_libs  
      [ conditional <ssl>on : <library>/ecflow_top//openssl_libs ]
    ;

# ========================================================================
# Documentation: 
# ========================================================================
# Place the shared library 'ecflow' into the ecflow/ directory. 
# - *REQUIRED* for sphinx-build. Documentation generation  See Doc/online/conf.py
#   We use this as first place to look for c++ extension
# - avoids hard wired dependency on compiler path
# - Picks up latest changes
install ecflow/ : ecflow  ;

# ========================================================================
# INSTALLATION:
# ========================================================================
# - install __init__.py file. 
# - This install is referenced in JamRoot.jam
install install-py1
   : [ glob ecflow/*.py ] 
   : <location>$(ECFLOW_DESTDIR)/$(ECFLOW_PYTHON_INSTALL_DIR)
   ;

# - <dll-path> for install Left in, in case its fixed in the future. 
# - This install is referenced in JamRoot.jam
# - <install-dependencies>on will also install boost_python shared lib and add repath to it.
install install-py 
   : ecflow
   : <install-type>PYTHON_EXTENSION 
     <install-type>SHARED_LIB 
     <location>$(ECFLOW_DESTDIR)$(ECFLOW_PYTHON_INSTALL_DIR)
   ;

# make install explicit, otherwise we end installing for all calls to bjam
explicit install-py1 ;
explicit install-py  ;

# ========================================================================
# TESTING: unit-tests and test for python fragments in online tutorial
# ========================================================================
import testing ;

# A little "rule" (function) to clean up the syntax of declaring tests
# of these extension modules.
local rule run-test ( test-name : sources + )
{
    testing.make-test run-pyd : $(sources) : : $(test-name) ;
}

#
# Declare test targets; 
# Note can't run TestWith until all platforms support with statement, i.e python 2.6 or greater
#                       
run-test TestClientApi      : ecflow [ glob test/py_s_TestClientApi.py ] ;
run-test TestPythonChildApi : ecflow [ glob test/py_s_TestPythonChildApi.py ] ;
run-test TestDefs           : ecflow [ glob test/py_u_TestDefs.py ] ;
run-test TestCopy           : ecflow [ glob test/py_u_TestCopy.py ] ;
run-test TestError          : ecflow [ glob test/py_u_TestError.py ] ;
run-test TestTraversal      : ecflow [ glob test/py_u_TestTraversal.py ] ;
run-test TestDefsCheck      : ecflow [ glob test/py_u_TestDefsCheck.py ] ;
run-test TestSimulator      : ecflow [ glob test/py_u_TestSimulator.py ] ;
run-test TestAddDelete      : ecflow [ glob test/py_u_TestAddDelete.py ] ;
run-test TestAddDeleteError : ecflow [ glob test/py_u_TestAddDeleteError.py ] ;
run-test TestAddDeleteFunc : ecflow [ glob test/py_u_TestAddDeleteFunc.py ] ;
run-test TestAddNodeFunc   : ecflow [ glob test/py_u_TestAddNodeFunc.py ] ;
run-test TestParent        : ecflow [ glob test/py_u_TestParent.py ] ;
run-test TestUserManual    : ecflow [ glob test/py_u_TestUserManual.py ] ;
run-test TestJobGeneration : ecflow [ glob test/py_u_TestJobGeneration.py ] ;
run-test TestGetAllTasks   : ecflow [ glob test/py_u_TestGetAllTasks.py ] ;
run-test TestDerivable     : ecflow [ glob test/py_u_TestDerivable.py ] ;
run-test TestWith          : ecflow [ glob test/py_u_TestWith.py ] ;
run-test TestFind          : ecflow [ glob test/py_u_TestFind.py ] ;
run-test TestMigrate       : ecflow [ glob migrate/py_u_TestMigrate.py ] ;
run-test TestRepeatArithmetic  : ecflow [ glob test/py_u_TestRepeatArithmetic.py ] ;
run-test TestRemove            : ecflow [ glob test/py_u_TestRemove.py ] ;
run-test TestGeneratedVariable : ecflow [ glob test/py_u_TestGeneratedVariable.py ] ;
run-test TestEcf               : ecflow [ glob test/py_u_TestEcf.py ] ;
run-test TestFlag              : ecflow [ glob test/py_u_TestFlag.py ] ;
run-test TestAutoAddExtern     : ecflow [ glob test/py_u_TestAutoAddExtern.py ] ;
run-test test_collection       : ecflow [ glob test/py_u_test_collection.py ] ;
run-test test_add              : ecflow [ glob test/py_u_test_add.py ] ;
run-test test_tutorial         : ecflow [ glob test/py_u_test_tutorial.py ] ;
run-test test_manual           : ecflow [ glob test/py_u_test_manual.py ] ;
run-test test_replace_node     : ecflow [ glob test/py_u_test_replace_node.py ] ;
run-test test_get_attr         : ecflow [ glob test/py_u_test_get_attr.py ] ;
run-test test_defs_constructor : ecflow [ glob test/py_u_test_defs_constructor.py ] ;
run-test test_cron             : ecflow [ glob test/py_u_test_cron.py ] ;
run-test test_late             : ecflow [ glob test/py_u_test_late.py ] ;
run-test test                  : ecflow [ glob test/py_u_test.py ] ;

# A target that runs all the tests. 
# Note test_embed & test_embed_ecf commented out since we dont use this functionality
alias test-all
 :  TestUserManual TestJobGeneration  TestDefs TestError TestTraversal TestDefsCheck 
    TestSimulator TestAddDelete TestAddDeleteError TestAddDeleteFunc TestAddNodeFunc TestParent TestGetAllTasks 
    TestDerivable  TestMigrate TestRemove TestRepeatArithmetic TestWith TestFind TestGeneratedVariable TestEcf
    TestClientApi TestPythonChildApi TestFlag TestCopy TestAutoAddExtern  test_collection 
    test_add test_tutorial test_manual test_get_attr test_replace_node test_defs_constructor test_cron test_late test
    # test_embed test_embed_ecf 
    ;
   
# Only run tests when explicitly requested
explicit test-all
    TestUserManual TestJobGeneration TestDefs TestError TestTraversal TestDefsCheck 
    TestSimulator TestAddDelete TestAddDeleteError TestAddDeleteFunc TestAddNodeFunc TestParent TestGetAllTasks 
    TestDerivable TestMigrate TestRemove TestRepeatArithmetic TestWith TestFind TestGeneratedVariable TestEcf
    TestClientApi TestPythonChildApi TestFlag TestCopy TestAutoAddExtern  test_collection 
    test_add test_tutorial test_manual test_get_attr test_replace_node test_defs_constructor test_cron test_late test
    # test_embed test_embed_ecf 
    ;
 