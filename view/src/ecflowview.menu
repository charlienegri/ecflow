
!===========================================================
! Name        : 
! Author      : 
! Revision    : $Revision: #26 $ 
!
! Copyright 2009-2020 ECMWF.
! This software is licensed under the terms of the Apache Licence version 2.0 
! which can be obtained at http://www.apache.org/licenses/LICENSE-2.0. 
! In applying this licence, ECMWF does not waive the privileges and immunities 
! granted to it by virtue of its status as an intergovernmental organisation 
! nor does it submit to any jurisdiction. 
!
! Description : 
! this file may be found in 
! - ecflowview sources in order to generate  ecflowview.menu.h
! - ~/.ecflowrc/ecflowview.menu # edit backup remove (reset)
! - ~/ is preferred to $HOME
! - menus can call ecflow client command (start with 'ecflow_client')
! - menus can call system command (start with sh)
!===========================================================
!
! Format
!-------
! menu TITLE 
! {
!	(vis flg,enable flg,title,command,question,answer)
! }
!
!===========================================================
!
! Values for the status flags
!----------------------------
!
!NONE ALL UNKNOWN SUSPENDED COMPLETE QUEUED SUBMITTED ACTIVE
!ABORTED CLEAR SET SHUTDOWN HALTED
!
! Values for type flags
!----------------------
!
!NONE ALL SERVER SUITE FAMILY TASK EVENT
!
! Values for visible flags
!-------------------------
!
!NONE ALL SERVER SUITE FAMILY TASK EVENT
!
! Values for special flags
!-------------------------
! 
!NONE ALL  HAS_TRIGGERS HAS_TIME HAS_DATE
!
!===========================================================

!==============================================================================
! Main menu
!==============================================================================

version 1 0 0 ;

menu 'MAIN'
{
  (~SUSPENDED & NODE, ALL, 'Suspend',  'ecflow_client --suspend  <full_name>')
  (SUSPENDED & NODE,  ALL, 'Resume',   'ecflow_client --resume <full_name>')

  ( TASK, ~ACTIVE & ~SUBMITTED, 'Rerun', 'ecflow_client --force queued <full_name>')

  (TASK | ALIAS, ALL, 'Set', MENU)

  (TASK|ALIAS, ~ACTIVE & ~SUBMITTED, 'Execute', 'ecflow_client --run <full_name>')

  (SUITE|TASK|FAMILY, ~ACTIVE & ~SUBMITTED, 'Requeue',
     'ecflow_client --requeue force <full_name>', 
     'Confirm requeuing of <full_name>', YES)

  (SUITE|FAMILY, ABORTED | SUSPENDED, 'Requeue aborted',
    'ecflow_client --requeue abort <full_name>', 
    'Confirm requeuing of aborted tasks from <full_name>', YES)

  (ALL,ALL,'-',SEPARATOR)

  (SUITE|TASK|FAMILY,(QUEUED|SUSPENDED|ACTIVE) & (HAS_TRIGGERS|HAS_TIME|HAS_DATE),'Free Deps',MENU)
  (NODE | ALIAS, ALL, 'Special', MENU)
  (NODE | ALIAS, ALL, 'Defstatus', MENU)
  (NODE & ADMIN, ALL, 'Force',   MENU)
  ((NODE|ALIAS)& ADMIN, ALL,'Order', MENU)

  (ALL,ALL,'-',SEPARATOR ,'',YES)
  (SUITE|FAMILY, ALL, 'Web...', 'ecflow_client --url <full_name> ', '', YES)
  (TASK, ALL, 'Web', MENU)

  (ALL,ALL,'-',SEPARATOR)

  (SUITE & (OPER|ADMIN) ,UNKNOWN|COMPLETE,'Begin',
        'ecflow_client --begin <node_name>','',YES)

  (SUITE & (OPER|ADMIN) ,~SUBMITTED & ~ACTIVE,'Cancel',
        'ecflow_client --delete yes <full_name>',
        'Do you really want to cancel suite <full_name> ?',NO)

! Events
!---------------------------------

  (EVENT, CLEAR,     'Set'  ,    
    'ecflow_client --alter change event <node_name> set <parent_name>',   '',YES)
  (EVENT, SET,       'Clear',    
    'ecflow_client --alter change event <node_name> clear <parent_name>', '',YES)

!!-----------------------------------

  (SERVER & (ADMIN|OPER) & LOCKED , ALL , 'Unlock', 'unlock -y',
        'Before going further, please check why the server was locked.',NO)
	(ALL,ALL,'-',SEPARATOR,'',YES)

!!-----------------------------------

  (SERVER,SHUTDOWN|HALTED, 'Restart',  
    'ecflow_client --restart yes','Restart the server in <node_name>?' ,NO)
  (SERVER,~SHUTDOWN,       'Shutdown', 
    'ecflow_client --shutdown yes','Shutdown the server in <node_name>?',NO)
  (SERVER,~HALTED,         'Halt',     
    'ecflow_client --halt yes','Halt the server in <node_name>?',NO)
  (SERVER,HALTED|UNKNOWN,          'Terminate',
    'ecflow_client --terminate yes','Terminate the server in <node_name>?',NO)
  (ALL,ALL,'-',SEPARATOR,'',YES)
  (SERVER,ALL,             'Checkpoint','ecflow_client --check_pt','',YES)
  (SERVER,HALTED,          'Recover',   
    'ecflow_client --restore_from_checkpt','Recover the server in <node_name>?',NO)

!!-----------------------------------

  (LIMIT , ALL, 'Reset' , 
      'ecflow_client --alter change limit_value <node_name> 0 <parent_name>', 
      'Confirm resetting <full_name>', YES)
  (ALIAS , ALL, 'Remove', 'ecflow_client --delete yes <full_name>', 
    'Confirm remove alias <full_name>', YES)

!!-----------------------------------

  (ALL,ALL,'-',SEPARATOR)

  (TASK|LIMIT|LABEL|METER|REPEAT|VARIABLE, ALL , 'Edit...', WINDOW(Edit))
  (TASK|ALIAS, ALL , 'Output...', WINDOW(Output) )

  (TASK|ALIAS, SUBMITTED|ACTIVE , 'Status...',   WINDOW(Jobstatus))
  (ALIAS, ALL , 'Job...', WINDOW(Job) )
  (TASK|ALIAS, ALL , 'Script...', WINDOW(Script) )

  (SERVER, ALL ,  'Suites...',   WINDOW(Suites)   )
  (SERVER, ALL ,  'History...',  WINDOW(History)  )
  (SERVER, ALL ,  'Zombies...',  WINDOW(Zombies)  )
  (ALL,ALL,'-',SEPARATOR)
  (SERVER, ALL ,  'Options...',  WINDOW(Options)  )
  (SERVER, ALL ,  'Extra',  MENU  )
  (SERVER, ALL ,  'Ping',  'sh ecflow_client --port %ECF_PORT% --host %ECF_HOST% --ping' )
  (SERVER, ALL ,  'Stat',  'sh ecflow_client --port %ECF_PORT% --host %ECF_HOST% --stats' )
}

menu 'Set'
{
  (TASK|ALIAS, SUBMITTED|ACTIVE, 'Set complete', 
    'ecflow_client --force complete <full_name>',
    'Have you checked that the job is not active anymore (jobstatus) ?', YES)
  (TASK|ALIAS, UNKNOWN|QUEUED|ABORTED, 'Set complete', 
    'ecflow_client --force complete <full_name>')
  (TASK|ALIAS, SUBMITTED|ACTIVE, 'Set aborted', 
    'ecflow_client --force aborted <full_name>',
    'Have you checked that the job is not active anymore (jobstatus) ?', YES)
  (TASK|ALIAS, UNKNOWN|QUEUED|COMPLETE, 'Set aborted', 
     'ecflow_client --force aborted <full_name>')
}

menu 'Web' 
{
!  (TASK, ALL, 'Web...', 'ecflow_client --url <full_name> ', '', YES)
  (NODE, ALL ,  'WebM',  MENU  )
  (NODE, ALL ,  'WebW',  MENU  )
}

menu 'WebM' 
{
  (TASK, ALL, 'Web...', 'ecflow_client --url <full_name> ', '', YES)
  (TASK, ALL, 'Man', 'sh firefox %ECF_URL_BASE%/%ECF_URL%', '', YES)
  (TASK, ALL, 'Script', 'sh xterm -T Script -e vim %ECF_SCRIPT%', '', YES)
  (TASK, ALL, 'Job', 'sh xterm -T Job -e vim %ECF_JOB%', '', YES)
  (TASK, ALL, 'Output', 'sh xterm -T Output -e vim %ECF_JOBOUT%', '', YES)
  (TASK, ALL , 'TimeLine...', WINDOW(Timeline))
  ! request from Lidstr√∂m Jonas https://software.ecmwf.int/issues/browse/SUP-829
  (TASK, ALL,  'Details', 'sh  xterm -T Details-%ECF_NAME% -e "grep %ECF_NAME% %ECF_LOG% ; read"') 
}

menu 'WebW' 
{
  (TASK, ALL, 'WMan',    'sh firefox ${ECFLOW_WEB:-http://eurus.ecmwf.int:8000/api/v1/ecflow}/%ECF_HOST:%/%ECF_PORT:%/man/%ECF_NAME:%', '', YES)
  (TASK, ALL, 'WScript', 'sh firefox ${ECFLOW_WEB:-http://eurus.ecmwf.int:8000/api/v1/ecflow}/%ECF_HOST:%/%ECF_PORT:%/script/%ECF_NAME:%', '', YES)
  (TASK, ALL, 'WJob',    'sh firefox ${ECFLOW_WEB:-http://eurus.ecmwf.int:8000/api/v1/ecflow}/%ECF_HOST:%/%ECF_PORT:%/job/%ECF_NAME:%', '', YES)
  (TASK, ALL, 'WOut',    'sh firefox ${ECFLOW_WEB:-http://eurus.ecmwf.int:8000/api/v1/ecflow}/%ECF_HOST:%/%ECF_PORT:%/output/%ECF_NAME:%', '', YES)
  (TASK, ALL, 'Suites',  'sh firefox ${ECFLOW_WEB:-http://eurus.ecmwf.int:8000/api/v1/ecflow}/%ECF_HOST:%/%ECF_PORT:%/suites', '', YES)
  (TASK, ALL, 'Treemap', 'sh firefox ${ECFLOW_WEB:-http://eurus.ecmwf.int:8000/api/v1/ecflow}/%ECF_HOST:%/%ECF_PORT:%/suite/treemap/SAR/none/7/%SUITE:%', '', YES)
  (TASK, ALL, 'Flask',   'sh firefox ${ECFLOW_WEB_MONITOR:-http://eurus.ecmwf.int:5001}', '', YES)
}

!==============================================================================
! Status submenu
!==============================================================================

menu 'Status'
{
  (SUITE|TASK|FAMILY, ~SUSPENDED,'Suspend', 'ecflow_client --suspend <full_name>', '',YES)
  (SUITE|TASK|FAMILY, SUSPENDED ,'Resume',  'ecflow_client --resume <full_name>',  '',YES)

  (ALL,ALL,'-',SEPARATOR)

  (TASK, ~ACTIVE & ~SUBMITTED,   'Rerun',   'ecflow_client --force queued <full_name>',   '',YES)
  (TASK, ~COMPLETE, 'Set complete', 'ecflow_client --force complete <full_name>', '',YES)

  (SUITE|TASK|FAMILY|ALIAS, ~ACTIVE & ~SUBMITTED,
	 'Requeue','ecflow_client --requeue force <full_name>', 'Confirm requeuing of <full_name>', YES)

  (SUITE|FAMILY, ABORTED | SUSPENDED,
	'Requeue aborted','ecflow_client --requeue abort <full_name>', 
	'Confirm requeuing aborted tasks below <full_name>', YES)
}

!==============================================================================
! Suite submenu
!==============================================================================

menu 'Suite'
{
  (SUITE,UNKNOWN|COMPLETE,'Begin','ecflow_client --begin <node_name>','',YES)

  (SUITE,ALL,'Cancel','ecflow_client --delete yes <full_name>',
    'Do you really want to cancel <full_name> ?',NO)

  (ALL,ALL,'-',SEPARATOR)
}

!==============================================================================
! Delete submenu
!==============================================================================

menu 'Free Deps'
{
	(ALL,HAS_TRIGGERS|HAS_TIME|HAS_DATE, 'All dependencies','ecflow_client --free-dep all <full_name>')
	(ALL,HAS_TRIGGERS, 'Trigger dependencies','ecflow_client --free-dep trigger <full_name>')
	(ALL,HAS_TIME, 'Time dependencies','ecflow_client --free-dep time <full_name>')
	(ALL,QUEUED,   'Date dependencies','ecflow_client --free-dep date <full_name>')
}

menu "Order"
{
  (ALL,ALL,'Top','ecflow_client --order <full_name> top')
  (ALL,ALL,'Up','ecflow_client --order <full_name> up')
  (ALL,ALL,'Down','ecflow_client --order <full_name> down')
  (ALL,ALL,'Bottom','ecflow_client --order <full_name> bottom')
  (ALL,ALL,'Alphabetically','ecflow_client --order <full_name> alpha')
}

menu "Force"
{
  (NODE, ~UNKNOWN, 'Unknown',   'ecflow_client --force unknown recursive <full_name>')
  (NODE, ~COMPLETE & ~ACTIVE & ~SUBMITTED, 'Complete', 
   'ecflow_client --force complete recursive <full_name>', 
   'Check running/queued jobs and Confirm force complete of <full_name>', YES)
  (NODE, ~QUEUED & ~ACTIVE & ~SUBMITTED,   'Queued',   
   'ecflow_client --force queued recursive <full_name>')
  (NODE, ~SUBMITTED & ~ACTIVE,'Submitted',
   'ecflow_client --force submitted recursive <full_name>')
  (NODE, ~ACTIVE,   'Active',   'ecflow_client --force active recursive <full_name>')
  (NODE, ~ABORTED,  'Aborted',  'ecflow_client --force aborted recursive <full_name>', 
   'Check running/queued jobs and Confirm force submitted of <full_name>', YES)
}

menu "Defstatus"
{ 
(NODE, ALL, 'Complete', 'ecflow_client --alter change defstatus complete <full_name>')
(NODE, ALL, 'Queued', 'ecflow_client --alter change defstatus queued <full_name>')
}

menu "Special"
{
! ( (SUITE|FAMILY) & (COMPLETE|QUEUED|SUSPENDED) & ~MIGRATED,ALL,'Migrate', 'ecflow_client --migrate <full_name>','',NO)
! ( (SUITE|FAMILY) & MIGRATED,ALL,'Restore','ecflow_client --restore <full_name>','',YES)

  ( (SUITE|FAMILY) & (COMPLETE|QUEUED|SUSPENDED) & ~MIGRATED,ALL,'Hide', 'ecflow_client --alter set_flag migrated <full_name>')
  ( (SUITE|FAMILY) & MIGRATED,ALL,'Show','ecflow_client --alter clear_flag migrated <full_name>', 'click shift-update to display content below', YES)

  (SUITE|FAMILY,(ACTIVE|SUBMITTED|ABORTED|SUSPENDED),'Kill', 'ecflow_client --kill <full_name>','',YES)
  (TASK|ALIAS,(ACTIVE|SUBMITTED|SUSPENDED),'Kill','ecflow_client --kill <full_name>','',YES)
  (ALL,ALL,'CheckCmd',WINDOW(Check),'',YES)
  (ALL,ALL,'CheckT','sh xterm -hold -e ecflow_client --port %ECF_PORT% --host %ECF_HOST% --check /%SUITE%/%FAMILY:%%TASK:%')

  (TASK|ALIAS,ALL,'Free password','ecflow_client --alter add variable ECF_PASS FREE <full_name>')
  (TASK|ALIAS,ALL,'ClearZ','ecflow_client --alter clear_flag zombie <full_name>')
  (TASK|ALIAS,ALL,'ClearLate','ecflow_client --alter clear_flag late <full_name>')
  (TASK|ALIAS,ALL,'ClearKill','ecflow_client --alter clear_flag killed <full_name>')

  (FAMILY, ~ACTIVE & ~SUBMITTED, 'Execute', 'ecflow_client --run <full_name>')
  ((SUITE|FAMILY|TASK), SELECTION, 'Plug into selected node', PLUG)
  (FAMILY|TASK,ALL,'get','ecflow_client --get <full_name>')
  (TASK,ALL,'status','ecflow_client --status <full_name>')
  (SUITE|SERVER, ALL, 'Collect...',  WINDOW(Collector))
  (SUITE|FAMILY, ALL, 'Walk', 'ecflow_client --force-dep-eval <full_name>')
}

menu "Extra"
{
  (SERVER|SUITE,ALL,'Windows', MENU)
  (ALL,ALL,'-',SEPARATOR)
  (SERVER,ALL,'ClearLate','ecflow_client --alter clear_flag late <full_name>')
  ! (SERVER|SUITE,ALL,'tail log', 'sh /usr/bin/xterm -e rsh %ECF_HOST% tail -f %ECF_HOME%/%ECF_LOG%&')
(SERVER|SUITE,ALL,'tail log', 'sh /usr/bin/xterm -e tail -f /tmp/$USER/$HOST*.ecf.log&')
  (ALL,ALL,'-',SEPARATOR) 
  (SERVER|SUITE,ALL,'svr load','ecflow_load.sh -h %ECF_HOME% -l %ECF_LOG% -n %ECF_HOST% -p %ECF_PORT%')
!  (SERVER|SUITE,ALL,'svr load','ecflow_client --server_load')
!  (SERVER|SUITE,ALL,'svr load log','ecflow_client --server_load %ECF_LOG%')
!  (SERVER|SUITE,ALL,'svr load home/log','ecflow_client --server_load %ECF_HOME%/%ECF_LOG%')
!  (SERVER|SUITE,ALL,'show png','sh ${EOG:-eog} %ECF_HOST%.%ECF_PORT%.png')
! one menu to replace four previous when it works
!  (SERVER|SUITE,ALL,'show load','sh ecflow_show_load.sh -n %ECF_HOST% -p %ECF_PORT% -h %ECF_HOME% %ECF_LOG%')

  (ALL,ALL,'-',SEPARATOR)
  (SERVER|SUITE,ALL,'overwrite', 'write menu')
  (SERVER|SUITE,ALL,'edit menu', 'sh /usr/bin/xterm -e vi ~/.ecflowrc/ecflowview.menu')
  (SERVER|SUITE,ALL,'bkup menu', 'sh /bin/cp ~/.ecflowrc/ecflowview.menu ~/.ecflowrc/ecflowview.menu.bak')
  (SERVER|SUITE,ALL,'rm   menu', 'sh /bin/rm ~/.ecflowrc/ecflowview.menu')
  (ALL,ALL,'-',SEPARATOR)
  (SERVER|SUITE,ALL,'debug on', 'ecflow_client --debug_server_on')
  (SERVER|SUITE,ALL,'debug off','ecflow_client --debug_server_off')
  (ALL,ALL,'-',SEPARATOR)
  (SERVER|SUITE,ALL,'stats','ecflow_client --stats')
  (SERVER|SUITE,ALL,'suites','ecflow_client --suites')
  (ALL,ALL,'-',SEPARATOR)
  (SERVER|SUITE,ALL,'log get','ecflow_client --log get')
  (SERVER|SUITE,ALL,'log clear','ecflow_client --log clear')
  (SERVER|SUITE,ALL,'log new','ecflow_client --log new')
  (ALL,ALL,'-',SEPARATOR)
  (SERVER|SUITE,ALL,'client logging on','ecflow_client --enable_logging')
  (SERVER|SUITE,ALL,'client loggging off','ecflow_client --disable_logging')
}

menu "Windows"
{
  (SERVER, ALL , 'Info...',      WINDOW(Info))
  (SERVER, ALL , 'Man...',       WINDOW(Manual))
  (SERVER, ALL , 'Var...',       WINDOW(Variables))
  (SERVER, ALL , 'Msg...',       WINDOW(Messages))
  (SERVER, ALL , 'Why...',       WINDOW(Why))
  (SERVER, ALL , 'Triggers...',  WINDOW(Triggers))
  (SERVER, ALL , 'Check...',     WINDOW(Check))
  (SERVER, ALL , 'Jobstatus...', WINDOW(Jobstatus))
  (SERVER, ALL , 'TimeLine...',  WINDOW(Timeline))
}

! DIRRC=~/.ecflowrc; rm -rf $DIRRC;         mkdir $DIRRC

! lm=src/ecflowview.menu; um=$HOME/.ecflowrc/ecflowview.menu; rm $um
! sh src/menu2c.sh < $lm > ${lm}.h && cp -f $lm $um
